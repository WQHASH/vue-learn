[2020-11-15T15:40:32.617] [DEBUG] resLogger - 断点-debug.
[2020-11-15T15:40:32.620] [INFO] resLogger - 信息-info.
[2020-11-15T15:40:32.621] [WARN] resLogger - 警告-warn.
[2020-11-15T15:40:32.622] [ERROR] resLogger - 报错-error
[2020-11-15T15:40:32.622] [FATAL] resLogger - 毁灭错-fatal
[2020-11-15T15:40:32.623] [INFO] resLogger - { sname: 'wq',
  sage: 12,
  sex: 1,
  city: 'beijingbeijingbeijingbeijing',
  form: 'xxxxxxxxxx',
  to: 'xssssdsds' } '信息222xx12'
[2020-11-15T15:40:45.784] [DEBUG] resLogger - 断点-debug.
[2020-11-15T15:40:45.788] [INFO] resLogger - 信息-info.
[2020-11-15T15:40:45.788] [WARN] resLogger - 警告-warn.
[2020-11-15T15:40:45.789] [ERROR] resLogger - 报错-error
[2020-11-15T15:40:45.789] [FATAL] resLogger - 毁灭错-fatal
[2020-11-15T15:40:45.789] [INFO] resLogger - { sname: 'wq',
  sage: 12,
  sex: 1,
  city: 'beijingbeijingbeijingbeijing',
  form: 'xxxxxxxxxx',
  to: 'xssssdsds' } '信息222xx12'
[2020-11-15T15:41:02.460] [DEBUG] resLogger - 断点-debug.
[2020-11-15T15:41:02.463] [INFO] resLogger - 信息-info.
[2020-11-15T15:41:02.464] [WARN] resLogger - 警告-warn.
[2020-11-15T15:41:02.465] [ERROR] resLogger - 报错-error
[2020-11-15T15:41:02.465] [FATAL] resLogger - 毁灭错-fatal
[2020-11-15T15:41:02.466] [INFO] resLogger - { sname: 'wq',
  sage: 12,
  sex: 1,
  city: 'beijingbeijingbeijingbeijing',
  form: 'xxxxxxxxxx',
  to: 'xssssdsds' } '信息222xx12'
[2020-11-15T15:41:48.845] [DEBUG] resLogger - 断点-debug.
[2020-11-15T15:41:48.848] [INFO] resLogger - 信息-info.
[2020-11-15T15:41:48.849] [WARN] resLogger - 警告-warn.
[2020-11-15T15:41:48.849] [ERROR] resLogger - 报错-error
[2020-11-15T15:41:48.850] [FATAL] resLogger - 毁灭错-fatal
[2020-11-15T15:41:48.851] [INFO] resLogger - { sname: 'wq',
  sage: 12,
  sex: 1,
  city: 'beijingbeijingbeijingbeijing',
  form: 'xxxxxxxxxx',
  to: 'xssssdsds' } '信息222xx12'
[2020-11-15T15:43:39.463] [DEBUG] resLogger - 断点-debug.
[2020-11-15T15:43:39.466] [INFO] resLogger - 信息-info.
[2020-11-15T15:43:39.467] [WARN] resLogger - 警告-warn.
[2020-11-15T15:43:39.467] [ERROR] resLogger - 报错-error
[2020-11-15T15:43:39.467] [FATAL] resLogger - 毁灭错-fatal
[2020-11-15T15:43:39.468] [INFO] resLogger - { sname: 'wq',
  sage: 12,
  sex: 1,
  city: 'beijingbeijingbeijingbeijing',
  form: 'xxxxxxxxxx',
  to: 'xssssdsds' } '信息222xx12'
[2020-11-15T15:43:41.518] [DEBUG] resLogger - 断点-debug.
[2020-11-15T15:43:41.522] [INFO] resLogger - 信息-info.
[2020-11-15T15:43:41.522] [WARN] resLogger - 警告-warn.
[2020-11-15T15:43:41.522] [ERROR] resLogger - 报错-error
[2020-11-15T15:43:41.523] [FATAL] resLogger - 毁灭错-fatal
[2020-11-15T15:43:41.523] [INFO] resLogger - { sname: 'wq',
  sage: 12,
  sex: 1,
  city: 'beijingbeijingbeijingbeijing',
  form: 'xxxxxxxxxx',
  to: 'xssssdsds' } '信息222xx12'
[2020-11-15T15:44:09.943] [DEBUG] resLogger - 断点-debug.
[2020-11-15T15:44:09.947] [INFO] resLogger - 信息-info.
[2020-11-15T15:44:09.947] [WARN] resLogger - 警告-warn.
[2020-11-15T15:44:09.948] [ERROR] resLogger - 报错-error
[2020-11-15T15:44:09.949] [FATAL] resLogger - 毁灭错-fatal
[2020-11-15T15:44:09.949] [INFO] resLogger - { sname: 'wq',
  sage: 12,
  sex: 1,
  city: 'beijingbeijingbeijingbeijing',
  form: 'xxxxxxxxxx',
  to: 'xssssdsds' } '信息222xx12'
[2020-11-15T15:44:13.866] [DEBUG] resLogger - 断点-debug.
[2020-11-15T15:44:13.870] [INFO] resLogger - 信息-info.
[2020-11-15T15:44:13.870] [WARN] resLogger - 警告-warn.
[2020-11-15T15:44:13.870] [ERROR] resLogger - 报错-error
[2020-11-15T15:44:13.871] [FATAL] resLogger - 毁灭错-fatal
[2020-11-15T15:44:13.871] [INFO] resLogger - { sname: 'wq',
  sage: 12,
  sex: 1,
  city: 'beijingbeijingbeijingbeijing',
  form: 'xxxxxxxxxx',
  to: 'xssssdsds' } '信息222xx12'
[2020-11-15T15:45:20.351] [INFO] resLogger - { log4js:
   { getLogger: [Function: getLogger],
     configure: [Function: configure],
     shutdown: [Function: shutdown],
     connectLogger: [Function: getLogger],
     levels:
      { [Function: Level]
        levels: [Array],
        ALL: [Level],
        TRACE: [Level],
        DEBUG: [Level],
        INFO: [Level],
        WARN: [Level],
        ERROR: [Level],
        FATAL: [Level],
        MARK: [Level],
        OFF: [Level] },
     addLayout: [Function: addLayout] },
  logger:
   Logger {
     category: 'resLogger',
     context: {},
     parseCallStack: [Function: defaultParseCallStack] } }
[2020-11-15T15:45:23.271] [INFO] resLogger - { log4js:
   { getLogger: [Function: getLogger],
     configure: [Function: configure],
     shutdown: [Function: shutdown],
     connectLogger: [Function: getLogger],
     levels:
      { [Function: Level]
        levels: [Array],
        ALL: [Level],
        TRACE: [Level],
        DEBUG: [Level],
        INFO: [Level],
        WARN: [Level],
        ERROR: [Level],
        FATAL: [Level],
        MARK: [Level],
        OFF: [Level] },
     addLayout: [Function: addLayout] },
  logger:
   Logger {
     category: 'resLogger',
     context: {},
     parseCallStack: [Function: defaultParseCallStack] } }
[2020-11-15T15:45:27.151] [DEBUG] resLogger - { log4js:
   { getLogger: [Function: getLogger],
     configure: [Function: configure],
     shutdown: [Function: shutdown],
     connectLogger: [Function: getLogger],
     levels:
      { [Function: Level]
        levels: [Array],
        ALL: [Level],
        TRACE: [Level],
        DEBUG: [Level],
        INFO: [Level],
        WARN: [Level],
        ERROR: [Level],
        FATAL: [Level],
        MARK: [Level],
        OFF: [Level] },
     addLayout: [Function: addLayout] },
  logger:
   Logger {
     category: 'resLogger',
     context: {},
     parseCallStack: [Function: defaultParseCallStack] } }
[2020-11-15T15:45:33.088] [INFO] resLogger - { log4js:
   { getLogger: [Function: getLogger],
     configure: [Function: configure],
     shutdown: [Function: shutdown],
     connectLogger: [Function: getLogger],
     levels:
      { [Function: Level]
        levels: [Array],
        ALL: [Level],
        TRACE: [Level],
        DEBUG: [Level],
        INFO: [Level],
        WARN: [Level],
        ERROR: [Level],
        FATAL: [Level],
        MARK: [Level],
        OFF: [Level] },
     addLayout: [Function: addLayout] },
  logger:
   Logger {
     category: 'resLogger',
     context: {},
     parseCallStack: [Function: defaultParseCallStack] } }
[2020-11-15T15:48:14.651] [INFO] resLogger - 1212
[2020-11-15T15:48:18.409] [INFO] resLogger - 1212
[2020-11-15T15:49:29.015] [INFO] resLogger - 1212
[2020-11-15T15:49:37.403] [INFO] resLogger - 1212
[2020-11-15T15:49:47.943] [DEBUG] resLogger - 1212
[2020-11-15T15:49:51.770] [DEBUG] resLogger - 1212
[2020-11-15T15:50:20.094] [DEBUG] resLogger - 1212
[2020-11-15T15:50:28.778] [DEBUG] resLogger - 1212222
[2020-11-15T15:50:31.986] [DEBUG] resLogger - xx
[2020-11-15T15:52:11.307] [INFO] resLogger - IncomingMessage {
  _readableState:
   ReadableState {
     objectMode: false,
     highWaterMark: 16384,
     buffer: BufferList { head: null, tail: null, length: 0 },
     length: 0,
     pipes: null,
     pipesCount: 0,
     flowing: true,
     ended: true,
     endEmitted: true,
     reading: false,
     sync: true,
     needReadable: false,
     emittedReadable: false,
     readableListening: false,
     resumeScheduled: false,
     paused: false,
     emitClose: true,
     autoDestroy: false,
     destroyed: false,
     defaultEncoding: 'utf8',
     awaitDrain: 0,
     readingMore: true,
     decoder: null,
     encoding: null },
  readable: false,
  _events:
   [Object: null prototype] { end: [Function: resetHeadersTimeoutOnReqEnd] },
  _eventsCount: 1,
  _maxListeners: undefined,
  socket:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 20 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 20 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 1605426731293,
        [Symbol(isReused)]: false },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 74,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 24904,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 75,
        [Symbol(triggerId)]: 74 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  connection:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 20 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 20 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 1605426731293,
        [Symbol(isReused)]: false },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 74,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 24904,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 75,
        [Symbol(triggerId)]: 74 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  httpVersionMajor: 1,
  httpVersionMinor: 1,
  httpVersion: '1.1',
  complete: true,
  headers:
   { 'content-type': 'application/json',
     'user-agent': 'PostmanRuntime/7.26.5',
     accept: '*/*',
     'postman-token': '124c484e-72f6-402d-851e-f2439c24c99e',
     host: '127.0.0.1:3000',
     'accept-encoding': 'gzip, deflate, br',
     connection: 'keep-alive',
     'content-length': '41' },
  rawHeaders:
   [ 'Content-Type',
     'application/json',
     'User-Agent',
     'PostmanRuntime/7.26.5',
     'Accept',
     '*/*',
     'Postman-Token',
     '124c484e-72f6-402d-851e-f2439c24c99e',
     'Host',
     '127.0.0.1:3000',
     'Accept-Encoding',
     'gzip, deflate, br',
     'Connection',
     'keep-alive',
     'Content-Length',
     '41' ],
  trailers: {},
  rawTrailers: [],
  aborted: false,
  upgrade: false,
  url: '/info',
  method: 'GET',
  statusCode: null,
  statusMessage: null,
  client:
   Socket {
     connecting: false,
     _hadError: false,
     _handle:
      TCP {
        reading: true,
        onread: [Function: onStreamRead],
        onconnection: null,
        _consumed: true,
        [Symbol(owner)]: [Circular] },
     _parent: null,
     _host: null,
     _readableState:
      ReadableState {
        objectMode: false,
        highWaterMark: 16384,
        buffer: BufferList { head: null, tail: null, length: 0 },
        length: 0,
        pipes: null,
        pipesCount: 0,
        flowing: true,
        ended: false,
        endEmitted: false,
        reading: true,
        sync: false,
        needReadable: true,
        emittedReadable: false,
        readableListening: false,
        resumeScheduled: false,
        paused: false,
        emitClose: false,
        autoDestroy: false,
        destroyed: false,
        defaultEncoding: 'utf8',
        awaitDrain: 0,
        readingMore: false,
        decoder: null,
        encoding: null },
     readable: true,
     _events:
      [Object: null prototype] {
        end: [Array],
        drain: [Array],
        timeout: [Function: socketOnTimeout],
        data: [Function: bound socketOnData],
        error: [Function: socketOnError],
        close: [Array],
        resume: [Function: onSocketResume],
        pause: [Function: onSocketPause] },
     _eventsCount: 8,
     _maxListeners: undefined,
     _writableState:
      WritableState {
        objectMode: false,
        highWaterMark: 16384,
        finalCalled: false,
        needDrain: false,
        ending: false,
        ended: false,
        finished: false,
        destroyed: false,
        decodeStrings: false,
        defaultEncoding: 'utf8',
        length: 0,
        writing: false,
        corked: 0,
        sync: true,
        bufferProcessing: false,
        onwrite: [Function: bound onwrite],
        writecb: null,
        writelen: 0,
        bufferedRequest: null,
        lastBufferedRequest: null,
        pendingcb: 0,
        prefinished: false,
        errorEmitted: false,
        emitClose: false,
        autoDestroy: false,
        bufferedRequestCount: 0,
        corkedRequestsFree: [Object] },
     writable: true,
     allowHalfOpen: true,
     _sockname: null,
     _pendingData: null,
     _pendingEncoding: '',
     server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 20 },
     _server:
      Server {
        _events: [Object],
        _eventsCount: 2,
        _maxListeners: undefined,
        _connections: 1,
        _handle: [TCP],
        _usingWorkers: false,
        _workers: [],
        _unref: false,
        allowHalfOpen: true,
        pauseOnConnect: false,
        httpAllowHalfOpen: false,
        timeout: 120000,
        keepAliveTimeout: 5000,
        maxHeadersCount: null,
        headersTimeout: 40000,
        _connectionKey: '6::::3000',
        [Symbol(IncomingMessage)]: [Function],
        [Symbol(ServerResponse)]: [Function],
        [Symbol(asyncId)]: 20 },
     timeout: 120000,
     parser:
      HTTPParser {
        '0': [Function: parserOnHeaders],
        '1': [Function: parserOnHeadersComplete],
        '2': [Function: parserOnBody],
        '3': [Function: parserOnMessageComplete],
        '4': [Function: bound onParserExecute],
        _headers: [],
        _url: '',
        socket: [Circular],
        incoming: [Circular],
        outgoing: null,
        maxHeaderPairs: 2000,
        _consumed: true,
        onIncoming: [Function: bound parserOnIncoming],
        parsingHeadersStart: 1605426731293,
        [Symbol(isReused)]: false },
     on: [Function: socketOnWrap],
     _paused: false,
     _httpMessage:
      ServerResponse {
        _events: [Object],
        _eventsCount: 1,
        _maxListeners: undefined,
        output: [],
        outputEncodings: [],
        outputCallbacks: [],
        outputSize: 0,
        writable: true,
        _last: false,
        chunkedEncoding: false,
        shouldKeepAlive: true,
        useChunkedEncodingByDefault: true,
        sendDate: true,
        _removedConnection: false,
        _removedContLen: false,
        _removedTE: false,
        _contentLength: null,
        _hasBody: true,
        _trailer: '',
        finished: false,
        _headerSent: false,
        socket: [Circular],
        connection: [Circular],
        _header: null,
        _onPendingData: [Function: bound updateOutgoingData],
        _sent100: false,
        _expect_continue: false,
        req: [Circular],
        locals: [Object: null prototype] {},
        [Symbol(isCorked)]: false,
        [Symbol(outHeadersKey)]: [Object] },
     [Symbol(asyncId)]: 74,
     [Symbol(lastWriteQueueSize)]: 0,
     [Symbol(timeout)]:
      Timeout {
        _called: false,
        _idleTimeout: 120000,
        _idlePrev: [TimersList],
        _idleNext: [TimersList],
        _idleStart: 24904,
        _onTimeout: [Function: bound ],
        _timerArgs: undefined,
        _repeat: null,
        _destroyed: false,
        [Symbol(unrefed)]: true,
        [Symbol(asyncId)]: 75,
        [Symbol(triggerId)]: 74 },
     [Symbol(kBytesRead)]: 0,
     [Symbol(kBytesWritten)]: 0 },
  _consuming: false,
  _dumped: false,
  next: [Function: next],
  baseUrl: '/user',
  originalUrl: '/user/info',
  _parsedUrl:
   Url {
     protocol: null,
     slashes: null,
     auth: null,
     host: null,
     port: null,
     hostname: null,
     hash: null,
     search: null,
     query: null,
     pathname: '/info',
     path: '/info',
     href: '/info',
     _raw: '/info' },
  params: {},
  query: {},
  res:
   ServerResponse {
     _events:
      [Object: null prototype] { finish: [Function: bound resOnFinish] },
     _eventsCount: 1,
     _maxListeners: undefined,
     output: [],
     outputEncodings: [],
     outputCallbacks: [],
     outputSize: 0,
     writable: true,
     _last: false,
     chunkedEncoding: false,
     shouldKeepAlive: true,
     useChunkedEncodingByDefault: true,
     sendDate: true,
     _removedConnection: false,
     _removedContLen: false,
     _removedTE: false,
     _contentLength: null,
     _hasBody: true,
     _trailer: '',
     finished: false,
     _headerSent: false,
     socket:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 74,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 24904,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 75,
           [Symbol(triggerId)]: 74 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     connection:
      Socket {
        connecting: false,
        _hadError: false,
        _handle: [TCP],
        _parent: null,
        _host: null,
        _readableState: [ReadableState],
        readable: true,
        _events: [Object],
        _eventsCount: 8,
        _maxListeners: undefined,
        _writableState: [WritableState],
        writable: true,
        allowHalfOpen: true,
        _sockname: null,
        _pendingData: null,
        _pendingEncoding: '',
        server: [Server],
        _server: [Server],
        timeout: 120000,
        parser: [HTTPParser],
        on: [Function: socketOnWrap],
        _paused: false,
        _httpMessage: [Circular],
        [Symbol(asyncId)]: 74,
        [Symbol(lastWriteQueueSize)]: 0,
        [Symbol(timeout)]:
         Timeout {
           _called: false,
           _idleTimeout: 120000,
           _idlePrev: [TimersList],
           _idleNext: [TimersList],
           _idleStart: 24904,
           _onTimeout: [Function: bound ],
           _timerArgs: undefined,
           _repeat: null,
           _destroyed: false,
           [Symbol(unrefed)]: true,
           [Symbol(asyncId)]: 75,
           [Symbol(triggerId)]: 74 },
        [Symbol(kBytesRead)]: 0,
        [Symbol(kBytesWritten)]: 0 },
     _header: null,
     _onPendingData: [Function: bound updateOutgoingData],
     _sent100: false,
     _expect_continue: false,
     req: [Circular],
     locals: [Object: null prototype] {},
     [Symbol(isCorked)]: false,
     [Symbol(outHeadersKey)]: [Object: null prototype] { 'x-powered-by': [Array] } },
  body: { name: 'wq22', password: '123', age: 34 },
  _body: true,
  length: undefined,
  route:
   Route { path: '/info', stack: [ [Layer] ], methods: { get: true } } } '测试接口'
[2020-11-15T16:00:14.612] [INFO] resLogger - 
[2020-11-15T16:00:16.589] [INFO] resLogger - 2121
[2020-11-15T16:00:22.833] [INFO] resLogger - 21222323dd1
[2020-11-15T16:03:08.060] [INFO] resLogger - 12121
[2020-11-15T22:30:19.193] [INFO] resLogger - 密码不正确
[2020-11-15T22:31:38.661] [INFO] resLogger - 密码不正确
[2020-11-15T22:32:13.720] [INFO] resLogger - 密码不正确
[2020-11-15T22:32:20.897] [INFO] resLogger - 密码不正确
[2020-11-15T22:32:34.821] [INFO] resLogger - 密码不正确
[2020-11-15T22:37:00.585] [INFO] resLogger - 密码不正确
[2020-11-15T22:37:04.043] [INFO] resLogger - 密码不正确
[2020-11-15T22:54:35.658] [INFO] resLogger - 密码不正确
[2020-11-15T22:54:36.283] [INFO] resLogger - 密码不正确
